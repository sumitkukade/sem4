anupama@Gpa:~/pucsd-iop$ ghci
GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
Prelude> fmap (+) (Just 2) (Just 3)

<interactive>:2:1:
    Couldn't match expected type ‘Maybe Integer -> t’
                with actual type ‘Maybe (Integer -> Integer)’
    Relevant bindings include it :: t (bound at <interactive>:2:1)
    The function ‘fmap’ is applied to three arguments,
    but its type ‘(Integer -> Integer -> Integer)
                  -> Maybe Integer -> Maybe (Integer -> Integer)’
    has only two
    In the expression: fmap (+) (Just 2) (Just 3)
    In an equation for ‘it’: it = fmap (+) (Just 2) (Just 3)
Prelude> fmap (+1) (Just 2) 
Just 3
Prelude> fmap (+1) Nothing
Nothing
Prelude> fmap (+1) (Left "sdsd")
Left "sdsd"
Prelude> fmap (+1) (Right 'a')

<interactive>:6:7:
    No instance for (Num Char) arising from a use of ‘+’
    In the first argument of ‘fmap’, namely ‘(+ 1)’
    In the expression: fmap (+ 1) (Right 'a')
    In an equation for ‘it’: it = fmap (+ 1) (Right 'a')
Prelude> fmap (+1) (Right 123)
Right 124
Prelude> fmap (+1) []
[]
Prelude> fmap (+1) [1,2,3]
[2,3,4]
Prelude> (fmap (+1) (\x->  x* 5)) 3
16)
Prelude> :k (->)
(->) :: * -> * -> *
Prelude> #(a -> b)  ((->) c ) a   ((->) c) b
--error

Prelude> :t (.)
(.) :: (b -> c) -> (a -> b) -> a -> c
Prelude> 
Prelude> :k (-> ) Int
(-> ) Int :: * -> *
Prelude> :k (Int -> Char)
(Int -> Char) :: *

