anupama@anupama-desktop:~/github-repos/pucsd-iop/anupama$ ghci
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :m Control.Monad
Prelude Control.Monad> :t (>>=)
(>>=) :: Monad m => m a -> (a -> m b) -> m b
Prelude Control.Monad> :t (>>)  (##Defn is mv1 >> mv2 = mv1 >>= \_ -> mv2)
(>>) :: Monad m => m a -> m b -> m b
Prelude Control.Monad> :t return
return :: Monad m => a -> m a
Prelude Control.Monad> :t fail (##another function of the monad class)
fail :: Monad m => String -> m a
Prelude Control.Monad> putStrLn "hello " >> putStrLn "world"
hello 
world
Prelude Control.Monad> getLine >>= \s -> (putStrLn s >> putStrLn s)
hello
hello
hello
Prelude Control.Monad> Nothing >> Just 2 (## Check whether it confirms with defn of >> above. Remember we have already defined >>= for Maybe)
Nothing
Prelude Control.Monad> Just 2 >> Nothing
Nothing
Prelude Control.Monad> Just 2 >> Just 3
Just 3
Prelude Control.Monad> Just 2 >>= \x -> return (x+1)
Just 3
Prelude Control.Monad> :t ($) (## this is Function application. Note f a is same as f $ a)
($) :: (a -> b) -> a -> b
Prelude Control.Monad> :t (flip ($))
(flip ($)) :: b -> (b -> c) -> c
Prelude Control.Monad> (\x -> x+ 5) $ 3 (## same as (\x -> x + 5) 3)
8
Prelude Control.Monad> let g = flip ($)
Prelude Control.Monad> g 3 (\x -> x+5)
8
Prelude Control.Monad> :t (>=>)   (## Like flip (.) except the functions here are monadic functions, of type a -> mb)
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
Prelude Control.Monad> :t (<=<) (## like (.) except functions are monadic functions of type  a -> mb)
(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
Prelude Control.Monad> let f = (\x -> Just (x+2))
Prelude Control.Monad> let g = (\x -> Just (x*3))

Prelude Control.Monad> let h = f >=> g
Prelude Control.Monad> h 3
Just 15
Prelude Control.Monad> Just (3+2) >>= g (## (>>=) is like  flip ($) but in the monadic world)
Just 15
Prelude Control.Monad> let h = f <=< g
Prelude Control.Monad> h 3
Just 11
Prelude Control.Monad> :t flip (.)
flip (.) :: (a -> b) -> (b -> c) -> a -> c
Prelude Control.Monad> (+1) 2
3
Prelude Control.Monad> (+1)$ 2
3
Prelude Control.Monad> :t flip (.)
flip (.) :: (a -> b) -> (b -> c) -> a -> c
Prelude Control.Monad> :t flip ($)
flip ($) :: b -> (b -> c) -> c
Prelude Control.Monad> :t (>>=)
(>>=) :: Monad m => m a -> (a -> m b) -> m b
Prelude Control.Monad> let fC = flip (.)
Prelude Control.Monad> let h = fC (\x -> x + 2) (\x-> x*3) 
Prelude Control.Monad> h (5)
21
Prelude Control.Monad> h $ 5
21
Prelude Control.Monad> h 5
21
Prelude Control.Monad> let f = \x -> Just (x+2)
Prelude Control.Monad> let g = \x -> Just (x*3)
Prelude Control.Monad> (f >=> g) 3 
Just 15
Prelude Control.Monad> (\x -> f x >>= g) 3
Just 15
Prelude Control.Monad> (\x -> (f x >>= g)) 3
Just 15
Prelude Control.Monad> 